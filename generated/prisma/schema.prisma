// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3. Define your data models.
model User {
  id           Int    @id @default(autoincrement())
  fullName     String @db.VarChar(500)
  email        String @unique
  passwordHash String @db.VarChar(500)

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Relation fields
  posts    Post[]
  comments Comment[]

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")

  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  createdRoles Role[] @relation("RoleCreatedBy")
  updatedRoles Role[] @relation("RoleUpdatedBy")
  deletedRoles Role[] @relation("RoleDeletedBy")

  createdPermissions Permission[] @relation("PermissionCreatedBy")
  updatedPermissions Permission[] @relation("PermissionUpdatedBy")
  deletedPermissions Permission[] @relation("PermissionDeletedBy")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Post {
  id      Int     @id @default(autoincrement())
  title   String
  content String? // The '?' makes this field optional (can be NULL)

  // Foreign key and relation to User
  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Relation field
  comments Comment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  // Foreign key and relation to User
  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  // Foreign key and relation to Post
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(500)
  description String @default("")
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
